grammar Slippers

  rule template
    element* {
      def eval(object_to_render=nil, template_group=nil)
        elements.inject('') do |rendered, item|
          rendered + item.eval(object_to_render, template_group)
        end
      end
    }
  end

  rule element
    if_stat / expr_tag / text
  end

  rule expr_tag
    !("$end$" / "$else$") delimiter expr delimiter {
      def eval(object_to_render, template_group)
        expr.eval(object_to_render, template_group)
      end
    }
  end

  rule expr
    apply_attribute_to_template / call / expression_option / attribute
  end
  
  rule apply_attribute_to_template 
    attribute apply_op call <ApplyAttributeToTemplateNode>
  end
  
  rule call
    template_path brackets <TemplateNode> / anonymous_template
  end
  
  rule anonymous_template
    "{" anonymous_template_words "}" <AnonymousTemplateNode>
  end
	  
  rule attribute
  	 id <AttributeToRenderNode>
  end
  
  rule expression_option
    attribute ';'
    space null_subtitute:('null="' nulls:anything_except_keywords '"')? (",")?
    space separator_value:('separator="' seps:anything_except_keywords '"' )?
    <AttributeWithExpressionOptionNode>
  end
  
  rule if_stat
    delimiter "if(" if_clause:attribute ")" delimiter
      if_expression:template
    else_clause:(delimiter 'else' delimiter
      else_expression:template)?
    delimiter 'end' delimiter <ConditionalTemplateNode>
  end
	
  rule text
    not_delimiter+ {
 	    def eval(*args)
   	   to_s
   	  end
      def to_s
        elements.inject('') {|rendered, item| rendered + item.to_s}
      end
    }
  end
  
  rule anonymous_template_words
    not_curly* {
      def to_s
        text_value
      end
    }
  end
	
  rule template_path
    id ('/' id)* {
      def to_s
        text_value
      end
    }
  end
    
  rule anything_except_keywords
    not_keyword* {
 	    def eval(*args)
   	   to_s
   	  end
      def to_s
        text_value
      end
    }
  end

  rule id
    [a-zA-Z0-9_]+ {
 	    def eval(*args)
   	   to_s
   	  end
      def to_s
        text_value
      end
    }
  end
  
  rule space
    ' '* {
        def eval(object_to_render=nil, template_group=nil)
          to_s
        end
        def to_s
            text_value
        end
      }
  end
  
  rule apply_op
   ':' {
      def to_s
        text_value
      end
   }
  end
  
  rule delimiter
   '$' {
      def to_s
        text_value
      end
   }
  end
    
  rule brackets
   '()' {
      def to_s
        text_value
      end
   }
  end
  
  rule escape 
    '\\'
  end
    
  rule not_delimiter 
    escape delimiter {
      def to_s
        delimiter.text_value
      end
    }
    / !delimiter . {
      def to_s
        text_value
      end
    }
  end

  rule not_apply_op 
    !apply_op . {
      def to_s
        text_value
      end
    }
  end
  
  rule not_keyword
  !(apply_op / delimiter / brackets / ';' / '"' / ")" / "if" / "else" / "end" ) . {
    def to_s
      text_value
    end
  }
  end
  
  rule not_curly
    !("{" / "}") . {
      def to_s
        text_value
      end
    }
  end
	
end