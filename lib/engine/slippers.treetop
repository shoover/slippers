grammar Slippers

  rule template
    element* {
      def eval(object_to_render=nil, template_group=nil)
        elements.map{|item| item.eval(object_to_render, template_group)}.join
      end
    }
  end

  rule element
    if_stat / expr_tag / text
  end

  rule expr_tag
    !keyword DELIM expr DELIM {
      def eval(object_to_render, template_group)
        expr.eval(object_to_render, template_group)
      end
    }
  end

  rule expr
    apply_attribute_to_template / template_ref / expression_option / attribute
  end
  
  rule apply_attribute_to_template 
    attribute COLON template_ref <ApplyAttributeToTemplateNode>
  end
  
  rule template_ref
    template_path brackets <TemplateNode>
    / anonymous_template <AnonymousTemplateNode>
  end
  
  rule anonymous_template
    LBRACE subtemplate:(!RBRACE .)* RBRACE
  end
	  
  rule attribute ID <AttributeToRenderNode> end
  
  rule expression_option
    attribute ';'
    space null_subtitute:('null=' nulls:STRING)? (",")?
    space separator_value:('separator=' seps:STRING)?
    <AttributeWithExpressionOptionNode>
  end
  
  rule if_stat
    DELIM "if(" if_clause:attribute ")" DELIM
      if_expression:template
    else_clause:(ELSE else_expression:template)?
    END <ConditionalTemplateNode>
  end
	
  rule text
    CHAROUT+ {
      def eval(*args)
        elements.map(&:to_s).join
      end
    }
  end
  
  rule template_path
    ID (SLASH ID)*
  end
    
  rule keyword (END / ELSE) end

  # Character outside of a delimited expression
  rule CHAROUT
    ESC delim:DELIM { def to_s; delim.text_value end }
    / !DELIM .      { def to_s; text_value end }
  end

  # Character inside a delimited expression
  rule CHARIN
    # Interpret newline and tab escapes
    '\n'   { def to_s; "\n" end }
    / '\t' { def to_s; "\t" end }
    / .    { def to_s; text_value end }
  end

  rule STRING
    QUOTE chars:(!QUOTE CHARIN)* QUOTE {
      def to_s; chars.elements.map(&:CHARIN).map(&:to_s).join end
    }
  end
  
  rule space ' '* end
  rule brackets '()' end

  rule ID [a-zA-Z0-9_]+ end
  rule QUOTE '"' end
  rule SLASH '/' end
  rule COLON ':' end
  rule ELSE DELIM 'else' DELIM end
  rule END DELIM 'end' DELIM end
  rule DELIM '$' end
  rule LBRACE '{' end
  rule RBRACE '}' end
  rule ESC '\\' end
  rule EOF !. end
end
