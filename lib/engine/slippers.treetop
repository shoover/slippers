grammar Slippers
	
  rule expression
   before:some_text expression_to_render space after:expression <ExpressionNode> / some_text
  end
  
  rule expression_to_render 
    conditional_template / templated_expression
  end
  
  rule templated_expression
    delimiter foo delimiter <TemplatedExpressionNode>
  end
  
  rule foo
    apply_attribute_to_template / template / expression_option / attribute
  end
  
  rule apply_attribute_to_template 
    attribute apply_op template <ApplyAttributeToTemplateNode>
  end
  
  rule template
    known_template / anonymous_template
  end
  
  rule known_template
    template_path brackets <TemplateNode>
  end
  
  rule anonymous_template
    "{" anonymous_template_words "}" <AnonymousTemplateNode>
  end
	  
  rule attribute
  	 anything_except_keywords <AttributeToRenderNode>
  end
  
  rule expression_option
    attribute:anything_except_keywords ';' space null_subtitute:('null="' nulls:anything_except_keywords '"')? (",")? space separator_value:('separator="' seps:anything_except_keywords '"' )?  <AttributeWithExpressionOptionNode>
  end
  
  rule conditional_template
    "$if(" if_clause:attribute ")$" if_expression:expression else_clause:('$else$' else_expression:expression)? '$end$' <ConditionalTemplateNode>
    
  end
	
  rule some_text
    not_delimiter* {
 	    def eval(*args)
   	   to_s
   	  end
      def to_s
        elements.inject('') {|rendered, item| rendered + item.to_s}
      end
    }
  end
  
  rule anonymous_template_words
    not_curly* {
      def to_s
        text_value
      end
    }
  end
	
  rule template_path
    anything_except_keywords {
      def to_s
        text_value
      end
    }
  end
    
  rule anything_except_keywords
    not_keyword* {
 	    def eval(*args)
   	   to_s
   	  end
      def to_s
        text_value
      end
    }
  end
  
  rule word_with_underscore
    word ("_" word)*
  end
  
  rule word
	[a-zA-Z]+ {
      def to_s
        text_value
      end
      }
  end
	
  rule space
    ' '* {
        def eval(object_to_render=nil, template_group=nil)
          to_s
        end
        def to_s
            text_value
        end
      }
  end
  
  rule apply_op
   ':' {
      def to_s
        text_value
      end
   }
  end
  
  rule delimiter
   '$' {
      def to_s
        text_value
      end
   }
  end
    
  rule brackets
   '()' {
      def to_s
        text_value
      end
   }
  end
  
  rule escape 
    '\\'
  end
    
  rule not_delimiter 
    escape delimiter {
      def to_s
        delimiter.text_value
      end
    }
    / !delimiter . {
      def to_s
        text_value
      end
    }
  end

  rule not_apply_op 
    !apply_op . {
      def to_s
        text_value
      end
    }
  end
  
  rule not_keyword
  !(apply_op / delimiter / brackets / ';' / '"' / ")" / "if" / "else" / "end" ) . {
    def to_s
      text_value
    end
  }
  end
  
  rule not_curly
    !("{" / "}") . {
      def to_s
        text_value
      end
    }
  end
	
end